name: Build and Release the bin files
on:
  workflow_dispatch:
  push:
    tags:
      - "v*"
    branches:
      - "master"
      - "main"
  pull_request:
    branches:
      - "master"
      - "main"

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions:
  contents: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: echo "matrix={\"target_name\":[\"esp32dev_debug\",\"esp32dev_release\",\"esp32dev_hardware_debug\",\"esp32s3_debug\",\"esp32s3_release\"]}" >> $GITHUB_OUTPUT

  build:
    needs: setup
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.setup.outputs.matrix)}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build OpenIris Firmware
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/zanzythebar/piodocker:latest
          options: -v ${{ github.workspace }}:/workspace
          run: |
            cd "Code/PlatformIO_Project/"
            export OPENIRIS_CI_BUILD=1
            mkdir build 
            mkdir build/${{ matrix.target_name }}
            echo "::endgroup::"
            echo "::group::pio run"
            pio run --environment ${{ matrix.target_name }}
            echo "::endgroup::"
            echo "::group::create zip"
            unzip -l 'build/${{ matrix.target_name }}/*.zip'
            echo "::endgroup::"
            echo "::group::copy firmware name file"
            cp tools/firmware_name.txt build/${{ matrix.target_name }}/firmware_name.txt
            cat build/${{ matrix.target_name }}/firmware_name.txt  
            echo "::endgroup::"
      - name: Archive Firmware name File
        # create an environment variable with the name of the firmware file by catting the firmware_name.txt file
        run: |
          cd "Code/PlatformIO_Project/"
          cat build/${{ matrix.target_name }}/firmware_name.txt
          echo "FIRMWARE_NAME=$(cat build/${{ matrix.target_name }}/firmware_name.txt)" >> $GITHUB_ENV
          ls -l build/${{ matrix.target_name }}
          ls -l build      
      - name: Archive Firmware Binaries
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target_name }}-firmware
          #path: "./ESP/.pio/build/${{ matrix.target_name }}/${{ env.FIRMWARE_NAME }}.bin"
          #${{ env.FIRMWARE_NAME }}.zip
          path: "Code/PlatformIO_Project/build/${{ matrix.target_name }}/${{ env.FIRMWARE_NAME }}.zip"
          retention-days: 5
          if-no-files-found: error
  release-tower:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Create Directory
        run: mkdir -p build
      - name: Download Firmware Files
        uses: actions/download-artifact@v2
        with:
          path: build/
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install -g conventional-changelog-conventionalcommits
      - run: npm install -g semantic-release@v19.0.5
      - run: npm install -g @semantic-release/exec
      - run: npm install -g @semantic-release/git
      - run: npm install -g @semantic-release/release-notes-generator
      - run: npm install -g @semantic-release/changelog
      - run: npm install -g @semantic-release/github
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo apt-get install -y jq
          chmod +x ./.github/scripts/prepareCMD.sh 
          semantic-release
  cleanup:
    needs: [setup, release-tower]
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.setup.outputs.matrix)}}
    name: Cleanup actions
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "♻️ remove build artifacts"
        uses: geekyeggo/delete-artifact@v1
        with:
          name: ${{ matrix.target_name }}-firmware
